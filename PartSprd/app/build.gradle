apply plugin: 'com.android.application'

android {
    compileSdk rootProject.ext.android["compileSdk"]

    signingConfigs {
        config {
            storeFile file('freeme_platform.jks')
            storePassword 'freeme'
            keyPassword 'freeme'
            keyAlias 'platform'
        }
    }

    //文件输出
    applicationVariants.all { variant ->
        def path = project.rootDir.absolutePath + "/out_apk/FreemeCamera_${defaultConfig.versionName}_${variant.productFlavors[0].name}"

        if (variant.buildType.name == "release")
            variant.packageApplicationProvider.get().outputDirectory = new File(path)

        variant.outputs.all {
            outputFileName = "FreemeCamera2.apk"
        }

        if (variant.buildType.name == "release" && variant.buildType.isMinifyEnabled()) {
            variant.assembleProvider.get().doLast {
                copy {
                    from variant.mappingFileProvider.get()
                    into path
                }
            }
        }
    }

    defaultConfig {
        applicationId "com.android.camera2"
        minSdk rootProject.ext.android["minSdk"]
        targetSdk rootProject.ext.android["targetSdk"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
    }

    flavorDimensions "product"
    productFlavors {
        normal {
            dimension "product"
            versionNameSuffix ".001"
        }
        normal_bytedance {
            applicationId "com.freeme.camera"
            dimension "product"
            versionNameSuffix ".010"
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
            buildConfigField("boolean", "DEBUGABLE", "false")
        }

        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
            buildConfigField("boolean", "DEBUGABLE", "true")
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res_update', 'src/main/res_t7510', 'src/main/res_freeme', 'src/main/res']
            jniLibs.srcDirs = ['jniLibs']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.equals('mockableAndroidJar')) {
                task.enabled = false
            }
        }
    }

    buildFeatures {
        dataBinding = true
    }

    aaptOptions {
        if (rootProject.useFreemePlatformRes) {
            additionalParameters '-I', rootProject.sdkFreemePlatformRes
        }
    }

    /*/
    // aar、jar及项目中统一使用下面的引用
    configurations.all {
        resolutionStrategy {
            force 'androidx.appcompat:appcompat:1.3.1'
            force 'com.google.android.material:material:1.4.0'
        }
    }
    //*/
}

repositories {
    flatDir {
        dirs 'libs', '../effect_core/libs'
    }
}

configurations {
    all*.exclude group: 'com.google.guava', module: 'listenablefuture'
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    if (rootProject.useFreemePlatformJar) {
        compileOnly files("$rootProject.sdkFreemePlatformJar")
    }
    implementation project(path: ':PartFreeme:common')
    implementation project(path: ':PartFreeme:Utils:libslrblur')
    implementation project(path: ':PartFreeme:Utils:libyuv')
    implementation project(path: ':PartFreeme:Utils:libbitmap')
    implementation project(path: ':PartFreeme:Utils:zbar')
    // 3rd
    implementation project(path: ':Part3rd:Bytedance:effect_core')
    implementation project(path: ':Part3rd:Baidu:bd_aip')
    // sprd
    implementation project(path: ':PartSprd:android-ex-camera2-portability')
    implementation project(path: ':PartSprd:xmp_toolkit')
}